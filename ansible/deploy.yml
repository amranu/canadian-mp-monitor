---
- name: Deploy Canadian MP Monitor to mptracker.ca
  hosts: mptracker
  become: yes
  vars:
    app_name: mp-monitor
    app_user: "{{ ansible_user }}"
    app_dir: "/home/{{ app_user }}/{{ app_name }}"
    domain_name: mptracker.ca
    email: "{{ letsencrypt_email }}"

  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install prerequisite packages
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - ufw
          - git
          - wget
        state: present

    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/debian/gpg
        state: present

    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/debian {{ ansible_distribution_release }} stable"
        state: present

    - name: Install Docker from official repository
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-compose-plugin
        state: present
        update_cache: yes

    - name: Start and enable Docker service
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Add user to docker group
      user:
        name: "{{ app_user }}"
        groups: docker
        append: yes

    - name: Configure UFW firewall
      block:
        - name: Reset UFW to defaults
          ufw:
            state: reset

        - name: Allow SSH
          ufw:
            rule: allow
            port: '22'
            proto: tcp

        - name: Allow HTTP
          ufw:
            rule: allow
            port: '80'
            proto: tcp

        - name: Allow HTTPS
          ufw:
            rule: allow
            port: '443'
            proto: tcp

        - name: Enable UFW
          ufw:
            state: enabled
            policy: deny
            direction: incoming

    - name: Create application directory
      file:
        path: "{{ app_dir }}"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0755'

    - name: Clone or update repository
      git:
        repo: "{{ git_repo }}"
        dest: "{{ app_dir }}"
        version: "{{ git_branch | default('master') }}"
        force: yes
      become_user: "{{ app_user }}"

    - name: Create nginx configuration directory
      file:
        path: "{{ app_dir }}/nginx/conf.d"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0755'

    - name: Ensure nginx files exist
      file:
        path: "{{ item }}"
        state: touch
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0644'
      loop:
        - "{{ app_dir }}/nginx/nginx.conf"
        - "{{ app_dir }}/nginx/conf.d/default.conf"
      when: false  # Skip this, files should exist from git

    - name: Check if nginx config files exist
      stat:
        path: "{{ app_dir }}/nginx/conf.d/default.conf"
      register: nginx_config_stat

    - name: Stop existing containers
      shell: |
        cd "{{ app_dir }}" && docker compose down
      become_user: "{{ app_user }}"
      ignore_errors: yes

    - name: Create nginx configuration for initial SSL setup
      copy:
        dest: "{{ app_dir }}/nginx/conf.d/initial.conf"
        content: |
          server {
              listen 80;
              server_name {{ domain_name }} www.{{ domain_name }};
              
              location /.well-known/acme-challenge/ {
                  root /var/www/certbot;
              }
              
              location / {
                  return 200 'Server is starting...';
                  add_header Content-Type text/plain;
              }
          }
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0644'

    - name: Temporarily rename main nginx config
      command: mv {{ app_dir }}/nginx/conf.d/default.conf {{ app_dir }}/nginx/conf.d/default.conf.backup
      become_user: "{{ app_user }}"
      ignore_errors: yes

    - name: Build all images first
      shell: |
        cd "{{ app_dir }}" && docker compose build
      become_user: "{{ app_user }}"

    - name: Start nginx for initial SSL certificate
      shell: |
        cd "{{ app_dir }}" && docker compose up -d nginx
      become_user: "{{ app_user }}"

    - name: Wait for nginx to be ready
      wait_for:
        port: 80
        delay: 10
        timeout: 60

    - name: Obtain Let's Encrypt SSL certificate
      docker_container:
        name: certbot-obtain
        image: certbot/certbot
        state: started
        detach: no
        cleanup: yes
        volumes:
          - "{{ app_name }}_certbot_conf:/etc/letsencrypt"
          - "{{ app_name }}_certbot_www:/var/www/certbot"
        command: >
          certonly --webroot --webroot-path=/var/www/certbot
          --email {{ email }} --agree-tos --no-eff-email
          -d {{ domain_name }} -d www.{{ domain_name }}
      become_user: "{{ app_user }}"

    - name: Stop nginx
      shell: |
        cd "{{ app_dir }}" && docker compose stop nginx
      become_user: "{{ app_user }}"

    - name: Restore main nginx configuration
      command: mv {{ app_dir }}/nginx/conf.d/default.conf.backup {{ app_dir }}/nginx/conf.d/default.conf
      become_user: "{{ app_user }}"
      ignore_errors: yes

    - name: Remove initial nginx configuration
      file:
        path: "{{ app_dir }}/nginx/conf.d/initial.conf"
        state: absent

    - name: Build and start backend first for initial setup
      shell: |
        cd "{{ app_dir }}" && docker compose up --build -d backend
      become_user: "{{ app_user }}"

    - name: Wait for backend to be ready
      shell: |
        cd "{{ app_dir }}" && docker compose exec -T backend curl -f http://localhost:5000/ || exit 1
      become_user: "{{ app_user }}"
      register: backend_health
      until: backend_health.rc == 0
      retries: 12
      delay: 5

    - name: Run initial cache setup - incremental update first
      shell: |
        cd "{{ app_dir }}" && docker compose exec -T backend python3 incremental_update.py
      become_user: "{{ app_user }}"

    - name: Run initial cache setup - fetch historical MPs
      shell: |
        cd "{{ app_dir }}" && docker compose exec -T backend python3 fetch_historical_mps.py
      become_user: "{{ app_user }}"

    - name: Run initial cache setup - cache MP voting records
      shell: |
        cd "{{ app_dir }}" && docker compose exec -T backend python3 cache_mp_voting_records.py
      become_user: "{{ app_user }}"

    - name: Setup cron jobs for cache updates
      shell: |
        cd "{{ app_dir }}" && docker compose exec -T backend chmod +x setup_cron.sh && docker compose exec -T backend ./setup_cron.sh
      become_user: "{{ app_user }}"
      ignore_errors: yes

    - name: Start all remaining services
      shell: |
        cd "{{ app_dir }}" && docker compose up -d
      become_user: "{{ app_user }}"

    - name: Wait for services to be healthy
      uri:
        url: "http://{{ ansible_host }}/health"
        method: GET
        status_code: 200
      register: health_check
      until: health_check.status == 200
      retries: 30
      delay: 10

    - name: Setup SSL certificate renewal cron job
      cron:
        name: "Renew SSL certificates"
        minute: "0"
        hour: "2"
        job: "cd {{ app_dir }} && docker compose exec -T certbot certbot renew --quiet && docker compose exec -T nginx nginx -s reload"
        user: "{{ app_user }}"

    - name: Setup log rotation
      copy:
        dest: /etc/logrotate.d/mp-monitor
        content: |
          /var/lib/docker/containers/*/*.log {
              daily
              missingok
              rotate 7
              compress
              delaycompress
              notifempty
              copytruncate
          }
        mode: '0644'

    - name: Display deployment information
      debug:
        msg:
          - "Deployment completed successfully!"
          - "Application URL: https://{{ domain_name }}"
          - "Health check endpoint: https://{{ domain_name }}/health"
          - "Backend API: https://{{ domain_name }}/api/"